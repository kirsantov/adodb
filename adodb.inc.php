<?php
/*
 * Set tabs to 4 for best viewing.
 * 
 * Latest version is available at http://adodb.sourceforge.net
 * 
 * This is the main include file for ADOdb.
 * Database specific drivers are stored in the adodb/drivers/adodb-*.inc.php
 *
 * The ADOdb files are formatted so that doxygen can be used to generate documentation.
 * Doxygen is a documentation generation tool and can be downloaded from http://doxygen.org/
 */

/**
\mainpage

@version V5.15 19 Jan 2012   (c) 2000-2012 John Lim (jlim#natsoft.com). All rights reserved.

Released under both BSD license and Lesser GPL library license. You can choose which license
you prefer.

PHP's database access functions are not standardised. This creates a need for a database
class library to hide the differences between the different database API's (encapsulate
the differences) so we can easily switch databases.

We currently support MySQL, Oracle, Microsoft SQL Server, Sybase, Sybase SQL Anywhere, DB2,
Informix, PostgreSQL, FrontBase, Interbase (Firebird and Borland variants), Foxpro, Access,
ADO, SAP DB, SQLite and ODBC. We have had successful reports of connecting to Progress and
other databases via ODBC.

Latest Download at http://adodb.sourceforge.net/

 */

if (defined('_ADODB_LAYER')) {
    exit;
}

define('_ADODB_LAYER', 1);

//==============================================================================================
// CONSTANT DEFINITIONS
//==============================================================================================


/**
 * Set ADODB_DIR to the directory where this file resides...
 * This constant was formerly called $ADODB_RootPath
 */
if (!defined('ADODB_DIR')) define('ADODB_DIR', dirname(__FILE__));

//==============================================================================================
// GLOBAL VARIABLES
//==============================================================================================

GLOBAL
$ADODB_vers, // database version
$ADODB_COUNTRECS, // count number of records returned - slows down query
$ADODB_CACHE_DIR, // directory to cache recordsets
$ADODB_CACHE,
$ADODB_CACHE_CLASS,
$ADODB_EXTENSION, // ADODB extension installed
$ADODB_COMPAT_FETCH, // If $ADODB_COUNTRECS and this is true, $rs->fields is available on EOF
$ADODB_FETCH_MODE, // DEFAULT, NUM, ASSOC or BOTH. Default follows native driver default...
$ADODB_GETONE_EOF,
$ADODB_QUOTE_FIELDNAMES; // Allows you to force quotes (backticks) around field names in queries generated by getinsertsql and getupdatesql.

//==============================================================================================
// GLOBAL SETUP
//==============================================================================================

$ADODB_EXTENSION = defined('ADODB_EXTENSION');

//********************************************************//
/*
Controls $ADODB_FORCE_TYPE mode. Default is ADODB_FORCE_VALUE (3).
Used in GetUpdateSql and GetInsertSql functions. Thx to Niko, nuko#mbnet.fi

    0 = ignore empty fields. All empty fields in array are ignored.
    1 = force null. All empty, php null and string 'null' fields are changed to sql NULL values.
    2 = force empty. All empty, php null and string 'null' fields are changed to sql empty '' or 0 values.
    3 = force value. Value is left as it is. Php null and string 'null' are set to sql NULL values and empty fields '' are set to empty '' sql values.
*/
define('ADODB_FORCE_IGNORE', 0);
define('ADODB_FORCE_NULL', 1);
define('ADODB_FORCE_EMPTY', 2);
define('ADODB_FORCE_VALUE', 3);
//********************************************************//


if (!$ADODB_EXTENSION || ADODB_EXTENSION < 4.0) {

    define('ADODB_BAD_RS', '<p>Bad $rs in %s. Connection or SQL invalid. Try using $connection->debug=true;</p>');

// allow [ ] @ ` " and . in table names
    define('ADODB_TABLE_REGEX', '([]0-9a-z_\:\"\`\.\@\[-]*)');

// prefetching used by oracle
    if (!defined('ADODB_PREFETCH_ROWS')) define('ADODB_PREFETCH_ROWS', 10);


    /*
    Controls ADODB_FETCH_ASSOC field-name case. Default is 2, use native case-names.
    This currently works only with mssql, odbc, oci8po and ibase derived drivers.

        0 = assoc lowercase field names. $rs->fields['orderid']
        1 = assoc uppercase field names. $rs->fields['ORDERID']
        2 = use native-case field names. $rs->fields['OrderID']
    */

    define('ADODB_FETCH_DEFAULT', 0);
    define('ADODB_FETCH_NUM', 1);
    define('ADODB_FETCH_ASSOC', 2);
    define('ADODB_FETCH_BOTH', 3);

    if (!defined('TIMESTAMP_FIRST_YEAR')) define('TIMESTAMP_FIRST_YEAR', 100);

    // PHP's version scheme makes converting to numbers difficult - workaround
    $_adodb_ver = (float)PHP_VERSION;
    if ($_adodb_ver >= 5.2) {
        define('ADODB_PHPVER', 0x5200);
    } else if ($_adodb_ver >= 5.0) {
        define('ADODB_PHPVER', 0x5000);
    } else
        die("PHP5 or later required. You are running " . PHP_VERSION);
}


/**
Accepts $src and $dest arrays, replacing string $data
 */
function ADODB_str_replace($src, $dest, $data)
{
    if (ADODB_PHPVER >= 0x4050) return str_replace($src, $dest, $data);

    $s = reset($src);
    $d = reset($dest);
    while ($s !== false) {
        $data = str_replace($s, $d, $data);
        $s = next($src);
        $d = next($dest);
    }
    return $data;
}

function ADODB_Setup()
{
    GLOBAL
    $ADODB_vers, // database version
    $ADODB_COUNTRECS, // count number of records returned - slows down query
    $ADODB_CACHE_DIR, // directory to cache recordsets
    $ADODB_FETCH_MODE,
    $ADODB_CACHE,
    $ADODB_CACHE_CLASS,
    $ADODB_FORCE_TYPE,
    $ADODB_GETONE_EOF,
    $ADODB_QUOTE_FIELDNAMES;

    if (empty($ADODB_CACHE_CLASS)) $ADODB_CACHE_CLASS = 'ADODB_Cache_File';
    $ADODB_FETCH_MODE = ADODB_FETCH_DEFAULT;
    $ADODB_FORCE_TYPE = ADODB_FORCE_VALUE;
    $ADODB_GETONE_EOF = null;

    if (!isset($ADODB_CACHE_DIR)) {
        $ADODB_CACHE_DIR = '/tmp'; //(isset($_ENV['TMP'])) ? $_ENV['TMP'] : '/tmp';
    } else {
        // do not accept url based paths, eg. http:/ or ftp:/
        if (strpos($ADODB_CACHE_DIR, '://') !== false)
            die("Illegal path http:// or ftp://");
    }


    // Initialize random number generator for randomizing cache flushes
    // -- note Since PHP 4.2.0, the seed  becomes optional and defaults to a random value if omitted.
    srand(((double)microtime()) * 1000000);

    /**
     * ADODB version as a string.
     */
    $ADODB_vers = 'V5.15 19 Jan 2012  (c) 2000-2012 John Lim (jlim#natsoft.com). All rights reserved. Released BSD & LGPL.';

    /**
     * Determines whether recordset->RecordCount() is used.
     * Set to false for highest performance -- RecordCount() will always return -1 then
     * for databases that provide "virtual" recordcounts...
     */
    if (!isset($ADODB_COUNTRECS)) $ADODB_COUNTRECS = true;
}


//==============================================================================================
// CHANGE NOTHING BELOW UNLESS YOU ARE DESIGNING ADODB
//==============================================================================================

ADODB_Setup();

//==============================================================================================
// CLASS ADOFieldObject
//==============================================================================================
/**
 * Helper class for FetchFields -- holds info on a column
 */
class ADOFieldObject
{
    var $name = '';
    var $max_length = 0;
    var $type = "";
    /*
        // additional fields by dannym... (danny_milo@yahoo.com)
        var $not_null = false;
        // actually, this has already been built-in in the postgres, fbsql AND mysql module? ^-^
        // so we can as well make not_null standard (leaving it at "false" does not harm anyways)

        var $has_default = false; // this one I have done only in mysql and postgres for now ...
            // others to come (dannym)
        var $default_value; // default, if any, and supported. Check has_default first.
    */
}


function _adodb_safedate($s)
{
    return str_replace(array("'", '\\'), '', $s);
}

// parse date string to prevent injection attack
// date string will have one quote at beginning e.g. '3434343'
function _adodb_safedateq($s)
{
    $len = strlen($s);
    if ($s[0] !== "'") $s2 = "'";
    else $s2 = "'";
    for ($i = 1; $i < $len; $i++) {
        $ch = $s[$i];
        if ($ch === '\\') {
            $s2 .= "'";
            break;
        } elseif ($ch === "'") {
            $s2 .= $ch;
            break;
        }

        $s2 .= $ch;
    }

    return $s2;
}


// for transaction handling

function ADODB_TransMonitor($dbms, $fn, $errno, $errmsg, $p1, $p2, &$thisConnection)
{
    //print "Errorno ($fn errno=$errno m=$errmsg) ";
    $thisConnection->_transOK = false;
    if ($thisConnection->_oldRaiseFn) {
        $fn = $thisConnection->_oldRaiseFn;
        $fn($dbms, $fn, $errno, $errmsg, $p1, $p2, $thisConnection);
    }
}

require_once __DIR__ . '/ADODB_Cache_File.php';

//==============================================================================================
// CLASS ADOConnection
//==============================================================================================

/**
 * Connection object. For connecting to databases, and executing queries.
 */
require_once __DIR__ . '/ADOConnection.php';


//==============================================================================================
// CLASS ADOFetchObj
//==============================================================================================

/**
 * Internal placeholder for record objects. Used by ADORecordSet->FetchObj().
 */
class ADOFetchObj
{
}

;

//==============================================================================================
// CLASS ADORecordSet_empty
//==============================================================================================

class ADODB_Iterator_empty implements Iterator
{

    private $rs;

    function __construct($rs)
    {
        $this->rs = $rs;
    }

    function rewind()
    {
    }

    function valid()
    {
        return !$this->rs->EOF;
    }

    function key()
    {
        return false;
    }

    function current()
    {
        return false;
    }

    function next()
    {
    }

    function __call($func, $params)
    {
        return call_user_func_array(array($this->rs, $func), $params);
    }

    function hasMore()
    {
        return false;
    }

}


/**
 * Lightweight recordset when there are no records to be returned
 */
class ADORecordSet_empty implements IteratorAggregate
{
    var $dataProvider = 'empty';
    var $databaseType = false;
    var $EOF = true;
    var $_numOfRows = 0;
    var $fields = false;
    var $connection = false;

    function RowCount()
    {
        return 0;
    }

    function RecordCount()
    {
        return 0;
    }

    function PO_RecordCount()
    {
        return 0;
    }

    function Close()
    {
        return true;
    }

    function FetchRow()
    {
        return false;
    }

    function FieldCount()
    {
        return 0;
    }

    function Init()
    {
    }

    function getIterator()
    {
        return new ADODB_Iterator_empty($this);
    }
}

//==============================================================================================
// DATE AND TIME FUNCTIONS
//==============================================================================================
if (!defined('ADODB_DATE_VERSION')) include(ADODB_DIR . '/adodb-time.inc.php');

//==============================================================================================
// CLASS ADORecordSet
//==============================================================================================

class ADODB_Iterator implements Iterator
{

    private $rs;

    function __construct($rs)
    {
        $this->rs = $rs;
    }

    function rewind()
    {
        $this->rs->MoveFirst();
    }

    function valid()
    {
        return !$this->rs->EOF;
    }

    function key()
    {
        return $this->rs->_currentRow;
    }

    function current()
    {
        return $this->rs->fields;
    }

    function next()
    {
        $this->rs->MoveNext();
    }

    function __call($func, $params)
    {
        return call_user_func_array(array($this->rs, $func), $params);
    }


    function hasMore()
    {
        return !$this->rs->EOF;
    }

}


/**
 * RecordSet class that represents the dataset returned by the database.
 * To keep memory overhead low, this class holds only the current row in memory.
 * No prefetching of data is done, so the RecordCount() can return -1 ( which
 * means recordcount not known).
 */
require_once __DIR__ . '/ADORecordSet.php';

//==============================================================================================
// CLASS ADORecordSet_array
//==============================================================================================

/**
 * This class encapsulates the concept of a recordset created in memory
 * as an array. This is useful for the creation of cached recordsets.
 *
 * Note that the constructor is different from the standard ADORecordSet
 */

class ADORecordSet_array extends ADORecordSet
{
    var $databaseType = 'array';

    var $_array; // holds the 2-dimensional data array
    var $_types; // the array of types of each column (C B I L M)
    var $_colnames; // names of each column in array
    var $_skiprow1; // skip 1st row because it holds column names
    var $_fieldobjects; // holds array of field objects
    var $canSeek = true;
    var $affectedrows = false;
    var $insertid = false;
    var $sql = '';
    var $compat = false;

    /**
     * Constructor
     *
     */
    function ADORecordSet_array($fakeid = 1)
    {
        global $ADODB_FETCH_MODE, $ADODB_COMPAT_FETCH;

        // fetch() on EOF does not delete $this->fields
        $this->compat = !empty($ADODB_COMPAT_FETCH);
        $this->ADORecordSet($fakeid); // fake queryID
        $this->fetchMode = $ADODB_FETCH_MODE;
    }

    function _transpose($addfieldnames = true)
    {
        global $ADODB_INCLUDED_LIB;

        if (empty($ADODB_INCLUDED_LIB)) include(ADODB_DIR . '/adodb-lib.inc.php');
        $hdr = true;

        $fobjs = $addfieldnames ? $this->_fieldobjects : false;
        adodb_transpose($this->_array, $newarr, $hdr, $fobjs);
        //adodb_pr($newarr);

        $this->_skiprow1 = false;
        $this->_array = $newarr;
        $this->_colnames = $hdr;

        adodb_probetypes($newarr, $this->_types);

        $this->_fieldobjects = array();

        foreach ($hdr as $k => $name) {
            $f = new ADOFieldObject();
            $f->name = $name;
            $f->type = $this->_types[$k];
            $f->max_length = -1;
            $this->_fieldobjects[] = $f;
        }
        $this->fields = reset($this->_array);

        $this->_initrs();

    }

    /**
     * Setup the array.
     *
     * @param array        is a 2-dimensional array holding the data.
     *            The first row should hold the column names
     *            unless paramter $colnames is used.
     * @param typearr    holds an array of types. These are the same types
     *            used in MetaTypes (C,B,L,I,N).
     * @param [colnames]    array of column names. If set, then the first row of
     *            $array should not hold the column names.
     */
    function InitArray($array, $typearr, $colnames = false)
    {
        $this->_array = $array;
        $this->_types = $typearr;
        if ($colnames) {
            $this->_skiprow1 = false;
            $this->_colnames = $colnames;
        } else {
            $this->_skiprow1 = true;
            $this->_colnames = $array[0];
        }
        $this->Init();
    }

    /**
     * Setup the Array and datatype file objects
     *
     * @param array        is a 2-dimensional array holding the data.
     *            The first row should hold the column names
     *            unless paramter $colnames is used.
     * @param fieldarr    holds an array of ADOFieldObject's.
     */
    function InitArrayFields(&$array, &$fieldarr)
    {
        $this->_array = $array;
        $this->_skiprow1 = false;
        if ($fieldarr) {
            $this->_fieldobjects = $fieldarr;
        }
        $this->Init();
    }

    function GetArray($nRows = -1)
    {
        if ($nRows == -1 && $this->_currentRow <= 0 && !$this->_skiprow1) {
            return $this->_array;
        } else {
            $arr = ADORecordSet::GetArray($nRows);
            return $arr;
        }
    }

    function _initrs()
    {
        $this->_numOfRows = sizeof($this->_array);
        if ($this->_skiprow1) $this->_numOfRows -= 1;

        $this->_numOfFields = (isset($this->_fieldobjects)) ?
                sizeof($this->_fieldobjects) : sizeof($this->_types);
    }

    /* Use associative array to get fields array */
    function Fields($colname)
    {
        $mode = isset($this->adodbFetchMode) ? $this->adodbFetchMode : $this->fetchMode;

        if ($mode & ADODB_FETCH_ASSOC) {
            if (!isset($this->fields[$colname]) && !is_null($this->fields[$colname])) $colname = strtolower($colname);
            return $this->fields[$colname];
        }
        if (!$this->bind) {
            $this->bind = array();
            for ($i = 0; $i < $this->_numOfFields; $i++) {
                $o = $this->FetchField($i);
                $this->bind[strtoupper($o->name)] = $i;
            }
        }
        return $this->fields[$this->bind[strtoupper($colname)]];
    }

    function FetchField($fieldOffset = -1)
    {
        if (isset($this->_fieldobjects)) {
            return $this->_fieldobjects[$fieldOffset];
        }
        $o = new ADOFieldObject();
        $o->name = $this->_colnames[$fieldOffset];
        $o->type = $this->_types[$fieldOffset];
        $o->max_length = -1; // length not known

        return $o;
    }

    function _seek($row)
    {
        if (sizeof($this->_array) && 0 <= $row && $row < $this->_numOfRows) {
            $this->_currentRow = $row;
            if ($this->_skiprow1) $row += 1;
            $this->fields = $this->_array[$row];
            return true;
        }
        return false;
    }

    function MoveNext()
    {
        if (!$this->EOF) {
            $this->_currentRow++;

            $pos = $this->_currentRow;

            if ($this->_numOfRows <= $pos) {
                if (!$this->compat) $this->fields = false;
            } else {
                if ($this->_skiprow1) $pos += 1;
                $this->fields = $this->_array[$pos];
                return true;
            }
            $this->EOF = true;
        }

        return false;
    }

    function _fetch()
    {
        $pos = $this->_currentRow;

        if ($this->_numOfRows <= $pos) {
            if (!$this->compat) $this->fields = false;
            return false;
        }
        if ($this->_skiprow1) $pos += 1;
        $this->fields = $this->_array[$pos];
        return true;
    }

    function _close()
    {
        return true;
    }

} // ADORecordSet_array

//==============================================================================================
// HELPER FUNCTIONS
//==============================================================================================

/**
 * Synonym for ADOLoadCode. Private function. Do not use.
 *
 * @deprecated
 */
function ADOLoadDB($dbType)
{
    return ADOLoadCode($dbType);
}

/**
 * Load the code for a specific database driver. Private function. Do not use.
 */
function ADOLoadCode($dbType)
{
    global $ADODB_LASTDB;

    if (!$dbType) return false;
    $db = strtolower($dbType);
    switch ($db) {
        case 'ado':
            if (PHP_VERSION >= 5) $db = 'ado5';
            $class = 'ado';
            break;
        case 'ifx':
        case 'maxsql':
            $class = $db = 'mysqlt';
            break;
        case 'postgres':
        case 'postgres8':
        case 'pgsql':
            $class = $db = 'postgres7';
            break;
        default:
            $class = $db;
            break;
    }

    $file = ADODB_DIR . "/drivers/adodb-" . $db . ".inc.php";
    @include_once($file);
    $ADODB_LASTDB = $class;
    if (class_exists("ADODB_" . $class)) return $class;

    //ADOConnection::outp(adodb_pr(get_declared_classes(),true));
    if (!file_exists($file)) ADOConnection::outp("Missing file: $file");
    else ADOConnection::outp("Syntax error in file: $file");
    return false;
}

/**
 * synonym for ADONewConnection for people like me who cannot remember the correct name
 */
function NewADOConnection($db = '')
{
    $tmp = ADONewConnection($db);
    return $tmp;
}

/**
 * Instantiate a new Connection class for a specific database driver.
 *
 * @param [db]  is the database Connection object to create. If undefined,
 *     use the last database driver that was loaded by ADOLoadCode().
 *
 * @return ADOConnection the freshly created instance of the Connection class.
 */
function ADONewConnection($db = '')
{
    GLOBAL $ADODB_NEWCONNECTION, $ADODB_LASTDB;

    if (!defined('ADODB_ASSOC_CASE')) define('ADODB_ASSOC_CASE', 2);
    $errorfn = (defined('ADODB_ERROR_HANDLER')) ? ADODB_ERROR_HANDLER : false;
    $false = false;
    if (($at = strpos($db, '://')) !== FALSE) {
        $origdsn = $db;
        $fakedsn = 'fake' . substr($origdsn, $at);
        if (($at2 = strpos($origdsn, '@/')) !== FALSE) {
            // special handling of oracle, which might not have host
            $fakedsn = str_replace('@/', '@adodb-fakehost/', $fakedsn);
        }

        if ((strpos($origdsn, 'sqlite')) !== FALSE && stripos($origdsn, '%2F') === FALSE) {
            // special handling for SQLite, it only might have the path to the database file.
            // If you try to connect to a SQLite database using a dsn like 'sqlite:///path/to/database', the 'parse_url' php function
            // will throw you an exception with a message such as "unable to parse url"
            list($scheme, $path) = explode('://', $origdsn);
            $dsna['scheme'] = $scheme;
            if ($qmark = strpos($path, '?')) {
                $dsn['query'] = substr($path, $qmark + 1);
                $path = substr($path, 0, $qmark);
            }
            $dsna['path'] = '/' . urlencode($path);
        } else
            $dsna = @parse_url($fakedsn);

        if (!$dsna) {
            return $false;
        }
        $dsna['scheme'] = substr($origdsn, 0, $at);
        if ($at2 !== FALSE) {
            $dsna['host'] = '';
        }

        if (strncmp($origdsn, 'pdo', 3) == 0) {
            $sch = explode('_', $dsna['scheme']);
            if (sizeof($sch) > 1) {

                $dsna['host'] = isset($dsna['host']) ? rawurldecode($dsna['host']) : '';
                if ($sch[1] == 'sqlite')
                    $dsna['host'] = rawurlencode($sch[1] . ':' . rawurldecode($dsna['host']));
                else
                    $dsna['host'] = rawurlencode($sch[1] . ':host=' . rawurldecode($dsna['host']));
                $dsna['scheme'] = 'pdo';
            }
        }

        $db = @$dsna['scheme'];
        if (!$db) return $false;
        $dsna['host'] = isset($dsna['host']) ? rawurldecode($dsna['host']) : '';
        $dsna['user'] = isset($dsna['user']) ? rawurldecode($dsna['user']) : '';
        $dsna['pass'] = isset($dsna['pass']) ? rawurldecode($dsna['pass']) : '';
        $dsna['path'] = isset($dsna['path']) ? rawurldecode(substr($dsna['path'], 1)) : ''; # strip off initial /

        if (isset($dsna['query'])) {
            $opt1 = explode('&', $dsna['query']);
            foreach ($opt1 as $k => $v) {
                $arr = explode('=', $v);
                $opt[$arr[0]] = isset($arr[1]) ? rawurldecode($arr[1]) : 1;
            }
        } else $opt = array();
    }
    /*
     *  phptype: Database backend used in PHP (mysql, odbc etc.)
     *  dbsyntax: Database used with regards to SQL syntax etc.
     *  protocol: Communication protocol to use (tcp, unix etc.)
     *  hostspec: Host specification (hostname[:port])
     *  database: Database to use on the DBMS server
     *  username: User name for login
     *  password: Password for login
     */
    if (!empty($ADODB_NEWCONNECTION)) {
        $obj = $ADODB_NEWCONNECTION($db);

    }

    if (empty($obj)) {

        if (!isset($ADODB_LASTDB)) $ADODB_LASTDB = '';
        if (empty($db)) $db = $ADODB_LASTDB;

        if ($db != $ADODB_LASTDB) $db = ADOLoadCode($db);

        if (!$db) {
            if (isset($origdsn)) $db = $origdsn;
            if ($errorfn) {
                // raise an error
                $ignore = false;
                $errorfn('ADONewConnection', 'ADONewConnection', -998,
                    "could not load the database driver for '$db'",
                    $db, false, $ignore);
            } else
                ADOConnection::outp("<p>ADONewConnection: Unable to load database driver '$db'</p>", false);

            return $false;
        }

        $cls = 'ADODB_' . $db;
        if (!class_exists($cls)) {
            adodb_backtrace();
            return $false;
        }

        $obj = new $cls();
    }

    # constructor should not fail
    if ($obj) {
        if ($errorfn) $obj->raiseErrorFn = $errorfn;
        if (isset($dsna)) {
            if (isset($dsna['port'])) $obj->port = $dsna['port'];
            foreach ($opt as $k => $v) {
                switch (strtolower($k)) {
                    case 'new':
                        $nconnect = true;
                        $persist = true;
                        break;
                    case 'persist':
                    case 'persistent':
                        $persist = $v;
                        break;
                    case 'debug':
                        $obj->debug = (integer)$v;
                        break;
                    #ibase
                    case 'role':
                        $obj->role = $v;
                        break;
                    case 'dialect':
                        $obj->dialect = (integer)$v;
                        break;
                    case 'charset':
                        $obj->charset = $v;
                        $obj->charSet = $v;
                        break;
                    case 'buffers':
                        $obj->buffers = $v;
                        break;
                    case 'fetchmode':
                        $obj->SetFetchMode($v);
                        break;
                    #ado
                    case 'charpage':
                        $obj->charPage = $v;
                        break;
                    #mysql, mysqli
                    case 'clientflags':
                        $obj->clientFlags = $v;
                        break;
                    #mysql, mysqli, postgres
                    case 'port':
                        $obj->port = $v;
                        break;
                    #mysqli
                    case 'socket':
                        $obj->socket = $v;
                        break;
                    #oci8
                    case 'nls_date_format':
                        $obj->NLS_DATE_FORMAT = $v;
                        break;
                    case 'cachesecs':
                        $obj->cacheSecs = $v;
                        break;
                    case 'memcache':
                        $varr = explode(':', $v);
                        $vlen = sizeof($varr);
                        if ($vlen == 0) break;
                        $obj->memCache = true;
                        $obj->memCacheHost = explode(',', $varr[0]);
                        if ($vlen == 1) break;
                        $obj->memCachePort = $varr[1];
                        if ($vlen == 2) break;
                        $obj->memCacheCompress = $varr[2] ? true : false;
                        break;
                }
            }
            if (empty($persist))
                $ok = $obj->Connect($dsna['host'], $dsna['user'], $dsna['pass'], $dsna['path']);
            else if (empty($nconnect))
                $ok = $obj->PConnect($dsna['host'], $dsna['user'], $dsna['pass'], $dsna['path']);
            else
                $ok = $obj->NConnect($dsna['host'], $dsna['user'], $dsna['pass'], $dsna['path']);

            if (!$ok) return $false;
        }
    }
    return $obj;
}


// $perf == true means called by NewPerfMonitor(), otherwise for data dictionary
function _adodb_getdriver($provider, $drivername, $perf = false)
{
    switch ($provider) {
        case 'odbtp':
            if (strncmp('odbtp_', $drivername, 6) == 0) return substr($drivername, 6);
        case 'odbc' :
            if (strncmp('odbc_', $drivername, 5) == 0) return substr($drivername, 5);
        case 'ado'  :
            if (strncmp('ado_', $drivername, 4) == 0) return substr($drivername, 4);
        case 'native':
            break;
        default:
            return $provider;
    }

    switch ($drivername) {
        case 'mysqlt':
        case 'mysqli':
            $drivername = 'mysql';
            break;
        case 'postgres7':
        case 'postgres8':
            $drivername = 'postgres';
            break;
        case 'firebird15':
            $drivername = 'firebird';
            break;
        case 'oracle':
            $drivername = 'oci8';
            break;
        case 'access':
            if ($perf) $drivername = '';
            break;
        case 'db2'   :
            break;
        case 'sapdb' :
            break;
        default:
            $drivername = 'generic';
            break;
    }
    return $drivername;
}

function NewPerfMonitor(&$conn)
{
    $false = false;
    $drivername = _adodb_getdriver($conn->dataProvider, $conn->databaseType, true);
    if (!$drivername || $drivername == 'generic') return $false;
    include_once(ADODB_DIR . '/adodb-perf.inc.php');
    @include_once(ADODB_DIR . "/perf/perf-$drivername.inc.php");
    $class = "Perf_$drivername";
    if (!class_exists($class)) return $false;
    $perf = new $class($conn);

    return $perf;
}

function NewDataDictionary(&$conn, $drivername = false)
{
    $false = false;
    if (!$drivername) $drivername = _adodb_getdriver($conn->dataProvider, $conn->databaseType);

    include_once(ADODB_DIR . '/adodb-lib.inc.php');
    include_once(ADODB_DIR . '/adodb-datadict.inc.php');
    $path = ADODB_DIR . "/datadict/datadict-$drivername.inc.php";

    if (!file_exists($path)) {
        ADOConnection::outp("Dictionary driver '$path' not available");
        return $false;
    }
    include_once($path);
    $class = "ADODB2_$drivername";
    $dict = new $class();
    $dict->dataProvider = $conn->dataProvider;
    $dict->connection = $conn;
    $dict->upperName = strtoupper($drivername);
    $dict->quote = $conn->nameQuote;
    if (!empty($conn->_connectionID))
        $dict->serverInfo = $conn->ServerInfo();

    return $dict;
}


/*
    Perform a print_r, with pre tags for better formatting.
*/
function adodb_pr($var, $as_string = false)
{
    if ($as_string) ob_start();

    if (isset($_SERVER['HTTP_USER_AGENT'])) {
        echo " <pre>\n";
        print_r($var);
        echo "</pre>\n";
    } else
        print_r($var);

    if ($as_string) {
        $s = ob_get_contents();
        ob_end_clean();
        return $s;
    }
}

/*
    Perform a stack-crawl and pretty print it.

    @param printOrArr  Pass in a boolean to indicate print, or an $exception->trace array (assumes that print is true then).
    @param levels Number of levels to display
*/
function adodb_backtrace($printOrArr = true, $levels = 9999, $ishtml = null)
{
    global $ADODB_INCLUDED_LIB;
    if (empty($ADODB_INCLUDED_LIB)) include(ADODB_DIR . '/adodb-lib.inc.php');
    return _adodb_backtrace($printOrArr, $levels, 0, $ishtml);
}